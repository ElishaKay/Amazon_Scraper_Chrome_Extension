const User = require('../models/user');
const Blog = require('../models/blog');
const Page = require('../models/page');
const Tag = require('../models/tag');
const URL = require('../models/url');

const { generateProductHTML } = require('../templates/generateProductHTML');
const slugify = require('slugify');
const stripHtml = require('string-strip-html');
const { smartTrim } = require('../helpers/blog');
const { errorHandler } = require('../helpers/dbErrorHandler');

//only leave here if you keep the jwt for chrome extension
const jwt = require('jsonwebtoken');

exports.logIn = (req, res) => {
    const { client_email: email, client_password: password }  = req.body;
    // check if user exist
    User.findOne({ email }).exec((err, user) => {
        if (err || !user) {
            return res.status(400).json({
                error: 'User with that email does not exist. Please signup.'
            });
        }
        // authenticate
        if (!user.authenticate(password)) {
            return res.status(400).json({
                error: 'Email and password do not match.'
            });
        }
        // generate a token and send to client
        const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, { expiresIn: '365d' });

        res.cookie('token', token, { expiresIn: '365d' });
        const { _id, username, name, email, role } = user;
        return res.json({
            token,
            user: { _id, username, name, email, role }
        });
    });
};

exports.saveProducts = (req, res, next) => {
    console.log('req.body in saveProducts route', req.body);

    let {_id, purchase_year, orderDetails} = req.body;

    if(orderDetails==undefined){
        return res.send({message: 'zero products', purchaseYear: purchase_year})
    }

    for (let y = 0; y < orderDetails.length; y++) {
        let newPost = new Blog();
        let newKeys = orderDetails[y];

        Object.assign(newPost, newKeys);
        newPost.product_imgurl = enlargePhoto(newPost.product_imgurl);
        let teaser = generateProductHTML(newPost);

        newPost.body = `<p>There's a story behind this purchase, but it hasn't been written yet.</p>`
        newPost.title = newPost.product_title;
        newPost.excerpt = smartTrim(teaser, 320, ' ', ' ...');
        newPost.slug = slugify(newPost.title).toLowerCase();
        newPost.mtitle = `${newPost.title} | ${process.env.APP_NAME}`;
        newPost.mdesc = stripHtml(teaser).substring(0, 160);
        // newPost.postedBy = req.user._id;

        newPost.postedBy = _id;
        newPost.autoGenerated = true;

        newPost.save((err, result) => {
            if (err) {
                console.log('this is the error from the newPost.save call:', err);
                // return res.status(400).json({
                //     error: errorHandler(err)
                // });
            } else {
                
                let arrayOfCategories = ['5e85d61409a9291f30e6b9ae'];
                let arrayOfTags = ['5e85d64a09a9291f30e6b9af'];
       
                Blog.findByIdAndUpdate(result._id, { $push: { categories: arrayOfCategories } }, { new: true }).exec(
                    (err, result) => {
                        if (err) {
                            // return res.status(400).json({
                            //     error: errorHandler(err)
                            // });
                        } else {
                            Blog.findByIdAndUpdate(result._id, { $push: { tags: arrayOfTags } }, { new: true }).exec(
                                (err, result) => {
                                    if (err) {
                                        // return res.status(400).json({
                                        //     error: errorHandler(err)
                                        // });
                                    } else {
                                        console.log('succesfully saved product: ', newPost.title);
                                    }
                                }
                            );
                        }
                    }
                );

            }
        });
    }

    //at end of for loop
    next(); 
};


exports.savePage = (req, res) => {
    const { purchase_year:purchaseYear, page_number:yearlyPageNumber, multi_page:multiPageYear, total_pages:totalPagesOfYear, _id:belongsTo } = req.body;
   
    let page = new Page({ purchaseYear, yearlyPageNumber, multiPageYear, totalPagesOfYear, belongsTo });

    page.save((err, data) => {
        if (err) {
            return res.status(400).json({
                error: errorHandler(err)
            });
        }
        res.json(data);
    });
};

exports.saveURL = (req, res) => {
    console.log('body:', req.body);

    const { _id:belongsTo, href, host, pathname, search } = req.body.location;
    const title = req.body.title;

    let url = new URL({ pageTitle: title, href, host, pathname, search, belongsTo });

    url.save((err, data) => {
        if (err) {
            return res.status(400).json({
                error: errorHandler(err)
            });
        }
        res.json(data);
    });
};



exports.saveProductsFromSearch = (req, res, next) => {

    // console.log('req.body in saveProductsFromSearch function', req.body);
    let {_id, searchKeyword, searchPageData, searchPageNumber, totalSearchPages} = req.body;
     
    if(searchPageData == null || searchPageNumber == totalSearchPages || searchPageNumber==75){
        return res.json({searchKeyword: searchKeyword, nextWhat:'nextKeyword'});
    } else {
        for (let y = 0; y < searchPageData.length; y++) {
            let newPost = new Blog();
            newPost.search_keyword = searchKeyword;

            let newKeys = searchPageData[y];

            Object.assign(newPost, newKeys);
            newPost.product_imgurl = enlargePhoto(newPost.product_imgurl);

            newPost.body = `<p>There's a story behind this purchase, but it hasn't been written yet.</p>`
            newPost.title = newPost.product_title;
            newPost.slug = slugify(newPost.title).toLowerCase();
            newPost.mtitle = `${newPost.title} | ${process.env.APP_NAME}`;
            newPost.mdesc = ''.concat(newPost.title,' by ',newPost.product_by,'. Rated ', newPost.product_rating, ' out of 5 stars, with ', 
                                    newPost.total_ratings, ' ratings. Read more and check out similar items in the ', newPost.search_keyword,' category.');
            // newPost.postedBy = req.user._id;
            // newPost.asin = newPost.product_link != null ? newPost.product_link.split('/dp/')[1].split('/')[0] : '';
            newPost.postedBy = _id;
            newPost.autoGenerated = true;

            newPost.product_rating = isNaN(newPost.product_rating) ? delete newPost.product_rating : newPost.product_rating;
            

            newPost.save((err, newPostCreated) => {
                if (err) {
                    if(err.code == 11000){
                        console.log('duplicate key error:', err.errmsg);
                    } else {
                       console.log('this is the error from the newPost.save call:', err);                    
                    }
                    // return res.status(400).json({
                    //     error: errorHandler(err)
                    // });
                } else {

                    searchKeyword = searchKeyword.replace(/['"]+/g, '').replace(/:/g,'');
                    let keywordTag = '';
                    let arrayOfTags = [];

                    Tag.findOne({ name: searchKeyword }).exec((err, tag) => {
                        if (err){
                            console.log('ran error logic');
                            // return res.status(401).json({
                            //     error: errorHandler(err)
                            // });
                        } else if (!tag){
                            console.log('ran no tag found logic');
                            let name = searchKeyword;
                            let slug = slugify(searchKeyword).toLowerCase();

                            const tag = new Tag({ name, slug });
                            tag.save((err, tag) => {
                                if (err) {
                                    // return res.status(401).json({
                                    //     error: errorHandler(err)
                                    // });
                                }
                                console.log('tag created successfully'); 
                                keywordTag = tag;
                                arrayOfTags.push(keywordTag._id);
                            });
                        } else {
                            console.log('tag found: ', tag)
                            keywordTag = tag;
                            arrayOfTags.push(keywordTag._id);
                        }
                       
                    // General and Books
                    // let arrayOfCategories = ['5e85d45d09a9291f30e6b9ac', '5e824e7ca965a4419ca1afef'];

                    // Add as many tags as you like here
                    
           
                    //pushing both category and tag
                    // Blog.findByIdAndUpdate(result._id, { $push: { categories: arrayOfCategories } }, { new: true }).exec(
                    //     (err, result) => {
                    //         if (err) {
                    //             // return res.status(400).json({
                    //             //     error: errorHandler(err)
                    //             // });
                    //         } else {
                    //             Blog.findByIdAndUpdate(result._id, { $push: { tags: arrayOfTags } }, { new: true }).exec(
                    //                 (err, result) => {
                    //                     if (err) {
                    //                         // return res.status(400).json({
                    //                         //     error: errorHandler(err)
                    //                         // });
                    //                     } else {
                    //                         console.log('succesfully saved product: ', newPost.title);
                    //                     }
                    //                 }
                    //             );
                    //         }
                    //     }
                    // );


                    // pushing just tag
                    Blog.findByIdAndUpdate(newPostCreated._id, { $push: { tags: arrayOfTags } }, { new: true }).exec(
                        (err, result) => {
                            if (err) {
                                // return res.status(400).json({
                                //     error: errorHandler(err)
                                // });
                            } else {
                                console.log('succesfully saved product: ', newPost.title);
                            }
                        }
                    );


                })}
        }
        )}}
    next(); 
    //at end of for loop
   
};


exports.savePageFromSearch = (req, res) => {
    const {  _id:belongsTo, searchKeyword, totalSearchPages, searchPageNumber } = req.body;
    
    let page = new Page({ belongsTo, searchKeyword, totalSearchPages, searchPageNumber });

    page.save((err, data) => {
        if (err) {
            return res.status(400).json({
                error: errorHandler(err)
            });
        }
        res.json(data);
    });
};



function enlargePhoto(imgurl){
  imgurl = imgurl.split('_');
  return ''.concat(imgurl[0],'jpg');
}

